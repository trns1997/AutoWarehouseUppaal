<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int numRobots = 1;
const int numPods = 3;
typedef int[0,numRobots-1] robot_id_t;
//typedef int[0,numPods-1] pod_id_t;

const int K = 2;
const int MAX_T = 10;

const int GRID_ROWS = 10;
const int GRID_COLS = 10;
const int EMPTY = 0;    // empty cell
const int POD = 1;      // cell contains a pod
const int ROBOT = 2;    // cell contains a robot
const int POD_ROWS = (GRID_ROWS-2)/2;
const int POD_COLS = (GRID_COLS-2);
const int NUMPODS = POD_ROWS * POD_COLS;

////////////////////////////////////////////////////////////////////////
// PODS
////////////////////////////////////////////////////////////////////////

const int POD_IDLE = 0;    // @ its place in the grid, available for new tasks
const int POD_TASK = 1;    // assigned to task
const int POD_TAKEN = 2;   // assigned to task taken by robot 

typedef int[POD_IDLE, POD_TAKEN] pod_status_t;

// All the pods
struct {
    int id;                // pod id
    int row, col;          // position in the grid
    pod_status_t status;   // pod status
} pods[NUMPODS] = {
    // grid row 2
    {  0, 2, 1, POD_IDLE},
    {  1, 2, 2, POD_IDLE},
    {  2, 2, 3, POD_IDLE},
    {  3, 2, 4, POD_IDLE},
    {  4, 2, 5, POD_IDLE},
    {  5, 2, 6, POD_IDLE},
    {  6, 2, 7, POD_IDLE},
    {  7, 2, 8, POD_IDLE},
    // grid row 4
    {  8, 4, 1, POD_IDLE},
    {  9, 4, 2, POD_IDLE},
    { 10, 4, 3, POD_IDLE},
    { 11, 4, 4, POD_IDLE},
    { 12, 4, 5, POD_IDLE},
    { 13, 4, 6, POD_IDLE},
    { 14, 4, 7, POD_IDLE},
    { 15, 4, 8, POD_IDLE},
    // grid row 6
    { 16, 6, 1, POD_IDLE},
    { 17, 6, 2, POD_IDLE},
    { 18, 6, 3, POD_IDLE},
    { 19, 6, 4, POD_IDLE},
    { 20, 6, 5, POD_IDLE},
    { 21, 6, 6, POD_IDLE},
    { 22, 6, 7, POD_IDLE},
    { 23, 6, 8, POD_IDLE},
    // grid row 8
    { 24, 8, 1, POD_IDLE},
    { 25, 8, 2, POD_IDLE},
    { 26, 8, 3, POD_IDLE},
    { 27, 8, 4, POD_IDLE},
    { 28, 8, 5, POD_IDLE},
    { 29, 8, 6, POD_IDLE},
    { 30, 8, 7, POD_IDLE},
    { 31, 8, 8, POD_IDLE}
};

////////////////////////////////////////////////////////////////////////
// WAREHOUSE LAYOUT (GRID)
////////////////////////////////////////////////////////////////////////

int grid[GRID_ROWS][GRID_COLS] = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
};

////////////////////////////////////////////////////////////////////////
// Task Manager handling
////////////////////////////////////////////////////////////////////////

// Linear congruential random number generator:
// cycle length = 255
int seed = 1;

int mini_rand()
{
    //NEEDS FIX
    //seed = 17 * seed + 137;
    //return seed &amp; 65535;
    return 1;
}

int task_queue[MAX_T];      // queue of pod indices
int taskCounter = 0;        // number of tasks in task_queue

// Put an element at the end of the queue
bool enqueue_task(int pod)
{
    if (taskCounter &lt; MAX_T) {
        task_queue[taskCounter++] = pod;
        return true;
    }
    return false;
}

// Remove the front element of the queue
// Return the pod ID
int dequeue_task()
{
    int i, pod = -1;
    if (taskCounter &gt; 0) {
        pod = task_queue[0];
        for (i = 1; i &lt; taskCounter; ++i)
            task_queue[i-1] = task_queue[i];
        task_queue[--taskCounter] = 0;
    }
    return pod;
}

int count_idle_pods()
{
    int i, n;
    for (i = n = 0; i &lt; NUMPODS; ++i)
        if (pods[i].status == POD_IDLE)
            ++n;
    return n;
}

int select_random_idle_pod()
{
    int i, pod;
    int idlepods = count_idle_pods();
    //int pod = mini_rand() % idlepods;
    seed = (17 * seed + 137) &amp; 255;
    pod = seed %  idlepods;

    for (i = 0; i &lt; NUMPODS; ++i) {
        if (pods[i].status == POD_IDLE) {
            if (pod == 0)
                return i;
            --pod;
        }
    }
    return -1;
}

// add a new pod index to the task queue
void add_new_task()
{
    // 1. select random idle pod
    int pod;
    int idlepods = count_idle_pods();

    if (idlepods == 0)
        return;

    pod = select_random_idle_pod();

    // 2. add pod to queue
    
    if (enqueue_task(pod))
        pods[pod].status = POD_TASK;
}

////////////////////////////////////////////////////////////////////////
// Channels
////////////////////////////////////////////////////////////////////////

//int startingPose[2] = {0, 0};
//int deliveryPose[2] = {0, 9};
//int bottomLeftPose[2] = {9, 0};
//chan robot_picked[numRobots];
//chan pod_picked[numPods], pod_dropped[numPods];
//chan pod_picked, pod_dropped;
chan human_finished, robot_arrived;
//int taskFromQueue;

//chan task_picked; </declaration>
	<template>
		<name>TempTaskManager</name>
		<parameter>const int T</parameter>
		<declaration>clock task_clock;</declaration>
		<location id="id0" x="-374" y="-357">
			<name x="-408" y="-416">Manage_tasks</name>
			<label kind="invariant" x="-408" y="-399">task_clock&lt;=T</label>
		</location>
		<location id="id1" x="25" y="-357">
			<name x="8" y="-416">Error</name>
			<label kind="invariant" x="-17" y="-399">task_clock&lt;=T</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-314" y="-255">task_clock&gt;=T &amp;&amp; taskCounter &lt; MAX_T</label>
			<label kind="assignment" x="-314" y="-238">task_clock=0,
add_new_task()</label>
			<nail x="-187" y="-263"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="85" y="-425">task_clock&gt;=T &amp;&amp; taskCounter == MAX_T</label>
			<label kind="assignment" x="136" y="-408">task_clock=0</label>
			<nail x="127" y="-280"/>
			<nail x="127" y="-399"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-289" y="-484">task_clock&gt;=T &amp;&amp; taskCounter == MAX_T</label>
			<label kind="assignment" x="-289" y="-459">task_clock = 0</label>
			<nail x="-161" y="-425"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-764" y="-399">task_clock&gt;=T &amp;&amp; taskCounter&lt;MAX_T</label>
			<label kind="assignment" x="-764" y="-382">task_clock=0,
add_new_task()</label>
			<nail x="-484" y="-408"/>
			<nail x="-484" y="-323"/>
		</transition>
	</template>
	<template>
		<name>TempRobot</name>
		<parameter>const robot_id_t id</parameter>
		<declaration>clock robot_clock;

// robot position in the grid
int my_row = GRID_ROWS-1;
int my_col = GRID_COLS-1;

// current task
int pod_id;
int pod_row, pod_col;

// flags
bool pod_reached = false;
bool delivery_reached = false;
bool pod_returned = false;
bool returned_to_idle = false;

// pick a task from the task queue
void pickTask()
{
    pod_id = dequeue_task();
    pod_row = pods[pod_id].row;
    pod_col = pods[pod_id].col;
    pod_reached = false;
    delivery_reached = false;
    pod_returned = false;
    returned_to_idle = false;
}

bool isIdlePos(int row, int col)
{
    return row == GRID_ROWS-1 &amp;&amp; col == GRID_COLS-1;
}

bool moveTo(int new_row, int new_col)
{
    if (isIdlePos(new_row, new_col)) {
        // @idle pos: infinite capacity
        grid[my_row][my_col] -= ROBOT;
        my_row = new_row;
        my_col = new_col;
        return true;
    }
    if (!pod_reached || pod_returned) {
        // not carrying the pod
        if (grid[new_row][new_col] &lt; ROBOT) {
            // there is no robot in the new position
            // either it is empty or there is a pod
            if (!isIdlePos(my_row, my_col))
                grid[my_row][my_col] -= ROBOT;
            my_row = new_row;
            my_col = new_col;
            grid[my_row][my_col] += ROBOT;
            return true;
        }
    } else {
        // carrying the pod
        if (grid[new_row][new_col] == EMPTY) {
            grid[my_row][my_col] = EMPTY;
            grid[new_row][new_col] = ROBOT+POD;
            my_row = new_row;
            my_col = new_col;
            return true;
        }
    }
    return false;
}

void moveToPod()
{
    if (my_row &gt; pod_row) {
        // robot below the pod row
        moveTo(my_row-1, my_col);
    } else {
        // robot on the same row as the pod
        if (moveTo(my_row, my_col-1))
        pod_reached = my_col == pod_col;
    } 
}

void moveToDelivery(){
    if (my_row == pod_row &amp;&amp; my_col == pod_col) {
        // just picked the pod
        moveTo(my_row-1, my_col);
    } else if (my_col &lt; GRID_COLS-1) {
        // must move right to the delivery column
        moveTo(my_row, my_col+1);
    } else {
        // I am already in the delivery column
        if (moveTo(my_row-1, my_col))
            delivery_reached = my_row == 0;
    }
}

void returnToPod(){
    if (my_row == 0 &amp;&amp; my_col &gt; 0) {
        moveTo(my_row, my_col-1);
    } else if (my_col == 0 &amp;&amp; my_row &lt; pod_row+1) {
        moveTo(my_row+1, my_col);
    } else if (my_row == pod_row+1) {
        // reached destination row
        if (my_col &lt; pod_col) {
            moveTo(my_row, my_col+1);
        } else if (my_col == pod_col) {
            // move up to pod home position
            if (moveTo(my_row-1, my_col)) {
                pod_returned = true;
                pods[pod_id].status = POD_IDLE;
            }
        }
    }   
}

void returnToIdle(){
    if (my_row == pod_row &amp;&amp; my_col &gt; 0) {
        moveTo(my_row, my_col-1);
    } else if (my_col == 0 &amp;&amp; my_row &lt; GRID_ROWS-1){
        moveTo(my_row+1, my_col);
    } else {
        if (moveTo(my_row, my_col+1)) {
            returned_to_idle = my_col == GRID_COLS-1;
        }
    }
}</declaration>
		<location id="id2" x="-1096" y="833">
			<name x="-1146" y="824">Idle</name>
		</location>
		<location id="id3" x="-339" y="833">
			<name x="-415" y="790">Move_To_Pod</name>
			<label kind="invariant" x="-424" y="807">robot_clock&lt;=K</label>
		</location>
		<location id="id4" x="-341" y="561">
			<name x="-324" y="519">Move_To_Delivery</name>
			<label kind="invariant" x="-324" y="536">robot_clock&lt;=K</label>
		</location>
		<location id="id5" x="-340" y="408">
			<name x="-350" y="374">Arrived_To_Delivery</name>
		</location>
		<location id="id6" x="-595" y="408">
			<name x="-612" y="357">Return_To_Pod</name>
			<label kind="invariant" x="-612" y="374">robot_clock&lt;=K</label>
		</location>
		<location id="id7" x="-1096" y="408">
			<name x="-1105" y="357">Return_To_Idle</name>
			<label kind="invariant" x="-1105" y="374">robot_clock&lt;=K</label>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-1428" y="408">robot_clock&gt;=K &amp;&amp; !returned_to_idle</label>
			<label kind="assignment" x="-1275" y="374">robot_clock=0,
returnToIdle()</label>
			<nail x="-1164" y="365"/>
			<nail x="-1164" y="433"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="guard" x="-1088" y="595">returned_to_idle</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-926" y="382">robot_clock &gt;= K &amp;&amp; pod_returned</label>
			<label kind="assignment" x="-926" y="408">robot_clock=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-629" y="459">robot_clock&gt;=K &amp;&amp; !pod_returned</label>
			<label kind="assignment" x="-629" y="476">returnToPod(),
robot_clock=0</label>
			<nail x="-561" y="459"/>
			<nail x="-620" y="459"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-527" y="391">human_finished?</label>
			<label kind="assignment" x="-527" y="408">robot_clock=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-323" y="484">delivery_reached</label>
			<label kind="synchronisation" x="-323" y="501">robot_arrived!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-272" y="603">robot_clock&gt;=K &amp;&amp; !delivery_reached</label>
			<label kind="assignment" x="-272" y="620">robot_clock=0,
moveToDelivery()</label>
			<nail x="-297" y="637"/>
			<nail x="-255" y="578"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-331" y="697">robot_clock&gt;=K  &amp;&amp; pod_reached</label>
			<label kind="assignment" x="-331" y="714">robot_clock=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-382" y="892">robot_clock&gt;=K &amp;&amp; !pod_reached</label>
			<label kind="assignment" x="-382" y="909">robot_clock=0,
moveToPod()</label>
			<nail x="-381" y="892"/>
			<nail x="-305" y="892"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-943" y="807">taskCounter&gt;0</label>
			<label kind="assignment" x="-943" y="833">robot_clock=0,
pickTask()</label>
		</transition>
	</template>
	<template>
		<name>Human</name>
		<parameter>const int H</parameter>
		<declaration>clock time_for_task;</declaration>
		<location id="id8" x="-127" y="-297">
			<name x="-137" y="-331">wait</name>
		</location>
		<location id="id9" x="-127" y="-76">
			<name x="-161" y="-59">working</name>
			<label kind="invariant" x="-161" y="-42">time_for_task &lt;=H</label>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-408" y="-187">time_for_task &gt;= H</label>
			<label kind="synchronisation" x="-391" y="-170">human_finished!</label>
			<nail x="-263" y="-178"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-119" y="-195">robot_arrived?</label>
			<label kind="assignment" x="-119" y="-212">time_for_task = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Task = TempTaskManager(10);
H = Human(5);
//R = TempRobot();

// List one or more processes to be composed into a system.
system TempRobot, Task, H;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
